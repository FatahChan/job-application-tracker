diff --git a/lib/commands/init.js b/lib/commands/init.js
index 706ed970fa912afc2b23ab8a57422cdf5d38827a..8368eb821cc1daa0d72ab6486a34c2f99bb41334 100644
--- a/lib/commands/init.js
+++ b/lib/commands/init.js
@@ -24,33 +24,38 @@ const init = new Command("init")
     }));
 
 const initProject = async () => {
-    let response = {}
-    const answers = await inquirer.prompt(questionsInitProject)
-    if (!answers.project) process.exit(1)
-
-    let sdk = await sdkForConsole();
+    let response = {};
+    const answers = await inquirer.prompt(questionsInitProject);
+    
     if (answers.start === "new") {
-        response = await teamsCreate({
-            teamId: 'unique()',
-            name: answers.project,
-            sdk,
-            parseOutput: false
-        })
-
-        let teamId = response['$id'];
+        if (!answers.project) process.exit(1);
+        const sdk = await sdkForConsole();
+        let teamId;
+        
+        if (answers.newOrganization) {
+            response = await teamsCreate({
+                name: answers.newOrganizationName,
+                teamId: answers.newOrganizationId,
+                sdk,
+                parseOutput: false,
+            });
+            teamId = response["$id"];
+        } else {
+            teamId = answers.organization.id;
+        }
         response = await projectsCreate({
             projectId: answers.id,
             name: answers.project,
             teamId,
-            parseOutput: false
-        })
-
-        localConfig.setProject(response['$id'], response.name);
+            parseOutput: false,
+        });
+        
+        localConfig.setProject(response["$id"], response.name);
     } else {
         localConfig.setProject(answers.project.id, answers.project.name);
     }
     success();
-}
+};
 
 const initFunction = async () => {
     // TODO: Add CI/CD support (ID, name, runtime)
diff --git a/lib/questions.js b/lib/questions.js
index 7f26b1382b618aea2f29666ddfd5e51d1f6fb265..81804119ae46b397180becbc0ed17607aa3c6426 100644
--- a/lib/questions.js
+++ b/lib/questions.js
@@ -6,6 +6,7 @@ const { sdkForConsole } = require("./sdks");
 
 const { databasesList } = require('./commands/databases');
 const { checkDeployConditions } = require('./utils');
+const { teamsList } = require('./commands/teams');
 const JSONbig = require("json-bigint")({ storeAsString: false });
 
 const getIgnores = (runtime) => {
@@ -139,6 +140,61 @@ const questionsInitProject = [
             },
         ],
     },
+    {
+        type: "confirm",
+        name: "newOrganization",
+        message: "Would you like to create a new organization?",
+        default: false,
+        when(answers) {
+            return answers.start == "new";
+        },
+    },
+    {
+        type: "input",
+        name: "newOrganizationName",
+        message: "What would you like to name your organization?",
+        when(answers) {
+            return answers.newOrganization;
+        },
+    },
+    {
+        type: "input",
+        name: "newOrganizationId",
+        message: "What ID would you like to have for your organization?",
+        default: "unique()",
+        when(answers) {
+            return answers.newOrganization;
+        },
+    },
+    {
+        type: "list",
+        name: "organization",
+        message: "Choose your organization.",
+        when(answers) {
+            return answers.start == "new" && !answers.newOrganization;
+        },
+        choices: async () => {
+            const sdk = await sdkForConsole();
+            let response = await teamsList({
+                sdk,
+                parseOutput: false
+            })
+            let teams = response["teams"]
+            let choices = teams.map((team, idx) => {
+                return {
+                    name: `${team.name} (${team['$id']})`,
+                    value: {
+                        name: team.name,
+                        id: team['$id']
+                    }
+                }
+            })
+            if (choices.length == 0) {
+                throw new Error("No organizations found. Please create a new organization.")
+            }
+            return choices;
+        }
+    },
     {
         type: "input",
         name: "project",
diff --git a/lib/sdks.js b/lib/sdks.js
index fe8afb8a7f8224fa5cb83fbbf04603664b227ab4..a23dd8805cd7d75f629fdcf124d4d86313e5c202 100644
--- a/lib/sdks.js
+++ b/lib/sdks.js
@@ -46,7 +46,6 @@ const sdkForConsole = async (requiresAuth = true) => {
   client
     .setEndpoint(endpoint)
     .setCookie(cookie)
-    .setProject("console")
     .setSelfSigned(selfSigned)
     .setLocale("en-US");
 
